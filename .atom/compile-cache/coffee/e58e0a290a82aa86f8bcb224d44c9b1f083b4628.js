(function() {
  var Project, fs, path, projects, projectsSortedByName, utils, workspaceElement;

  fs = require('fs');

  path = require('path');

  utils = require('../lib/utils');

  Project = require('../lib/models/project');

  workspaceElement = null;

  projects = null;

  projectsSortedByName = null;

  describe("Utils", function() {
    beforeEach(function() {
      var waitsForPromise;
      workspaceElement = atom.views.getView(atom.workspace);
      waitsForPromise = atom.packages.activatePackage('git-projects');
      projects = [new Project("notification"), new Project("settings-view"), new Project("atom")];
      return projectsSortedByName = [new Project("atom"), new Project("notification"), new Project("settings-view")];
    });
    describe("sortBy", function() {
      return it("sorts by name when sortBy == 'Project name'", function() {
        return expect(utils.sortBy('Project name', projects)).toEqual(projectsSortedByName);
      });
    });
    describe("parsePathString", function() {
      it("should be a function", expect(utils.parsePathString).toBeFunction);
      it("should only take strings in parameter", function() {
        var wrapper;
        wrapper = function(any) {
          return utils.parsePathString.bind(this, any);
        };
        expect(wrapper("")).not.toThrow;
        expect(wrapper(1)).toThrow;
        return expect(wrapper(null)).toThrow;
      });
      return it("should return a Set", function() {
        expect(utils.parsePathString("")).toEqual(new Set(["."]));
        expect(utils.parsePathString("path").size).toBe(1);
        expect(utils.parsePathString("path; another_path").size).toBe(2);
        expect(utils.parsePathString("same_path; same_path").size).toBe(1);
        return expect(utils.parsePathString("~").size).toBe(1);
      });
    });
    return describe("isRepositorySync", function() {
      it("should be a function", expect(utils.isRepositorySync).toBeFunction);
      return it("should return false if no params", function() {
        return expect(utils.isRepositorySync()).toBe(false);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiL1VzZXJzL2Vyc2thZ2dzLy5hdG9tL3BhY2thZ2VzL2dpdC1wcm9qZWN0cy9zcGVjL3V0aWxzLXNwZWMuY29mZmVlIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLDBFQUFBOztBQUFBLEVBQUEsRUFBQSxHQUFLLE9BQUEsQ0FBUSxJQUFSLENBQUwsQ0FBQTs7QUFBQSxFQUNBLElBQUEsR0FBTyxPQUFBLENBQVEsTUFBUixDQURQLENBQUE7O0FBQUEsRUFFQSxLQUFBLEdBQVEsT0FBQSxDQUFRLGNBQVIsQ0FGUixDQUFBOztBQUFBLEVBR0EsT0FBQSxHQUFVLE9BQUEsQ0FBUSx1QkFBUixDQUhWLENBQUE7O0FBQUEsRUFLQSxnQkFBQSxHQUFtQixJQUxuQixDQUFBOztBQUFBLEVBTUEsUUFBQSxHQUFXLElBTlgsQ0FBQTs7QUFBQSxFQU9BLG9CQUFBLEdBQXVCLElBUHZCLENBQUE7O0FBQUEsRUFTQSxRQUFBLENBQVMsT0FBVCxFQUFrQixTQUFBLEdBQUE7QUFFaEIsSUFBQSxVQUFBLENBQVcsU0FBQSxHQUFBO0FBQ1QsVUFBQSxlQUFBO0FBQUEsTUFBQSxnQkFBQSxHQUFtQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQVgsQ0FBbUIsSUFBSSxDQUFDLFNBQXhCLENBQW5CLENBQUE7QUFBQSxNQUNBLGVBQUEsR0FBa0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFkLENBQThCLGNBQTlCLENBRGxCLENBQUE7QUFBQSxNQUVBLFFBQUEsR0FBVyxDQUFLLElBQUEsT0FBQSxDQUFRLGNBQVIsQ0FBTCxFQUFrQyxJQUFBLE9BQUEsQ0FBUSxlQUFSLENBQWxDLEVBQWdFLElBQUEsT0FBQSxDQUFRLE1BQVIsQ0FBaEUsQ0FGWCxDQUFBO2FBR0Esb0JBQUEsR0FBdUIsQ0FBSyxJQUFBLE9BQUEsQ0FBUSxNQUFSLENBQUwsRUFBMEIsSUFBQSxP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

//# sourceURL=/Users/erskaggs/.atom/packages/git-projects/spec/utils-spec.coffee
