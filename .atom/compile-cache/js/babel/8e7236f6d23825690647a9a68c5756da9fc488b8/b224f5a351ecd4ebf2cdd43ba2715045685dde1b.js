Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.activate = activate;
exports.deactivate = deactivate;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _atom = require('atom');

var _treeViewGitRepositoryJs = require('./tree-view-git-repository.js');

var _treeViewGitRepositoryJs2 = _interopRequireDefault(_treeViewGitRepositoryJs);

'use babel';

var disposables;

function activate() {
  disposables = new _atom.CompositeDisposable(atom.project.onDidChangePaths(update), atom.commands.add('atom-workspace', 'tree-view-git-branch:reload', update));
  update();
}

function deactivate() {
  disposables.dispose();
  disposables = null;
}

var treeViewGitRepositories = new Map();

function update() {
  Promise.resolve(atom.packages.isPackageLoaded('tree-view') && atom.packages.activatePackage('tree-view')).then(function (treeViewPkg) {
    if (!treeViewPkg) return;
    var treeView = treeViewPkg.mainModule.createView();
    var treeViewEl = atom.views.getView(treeView);
    var repositories = atom.project.getRepositories();

    // remove old repositories
    for (var repository of treeViewGitRepositories.keys()) {
      if (repositories.indexOf(repository) > -1) continue;
      treeViewGitRepositories.get(repository).destroy();
      treeViewGitRepositories['delete'](repository);
    }

    // update existing repositories and add new ones
    for (var repository of repositories) {
      if (!repository) continue;
      if (treeViewGitRepositories.has(repository)) {
        treeViewGitRepositories.get(repository).update();
      } else {
        var projectRootEl = getProjectRootEl(treeViewEl, repository.getPath());
        treeViewGitRepositories.set(repository, (0, _treeViewGitRepositoryJs2['default'])(repository, projectRootEl));
      }
    }
  })['catch'](function (error) {
    return console.error(error.message, error.stack);
  });
}

function getProjectRootEl(treeViewEl, path) {
  var el = treeViewEl.querySelector('[data-path="' + path + '"]');
  while (!el.classList.contains('project-root')) el = el.parentNode;
  return el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9lcnNrYWdncy8uYXRvbS9wYWNrYWdlcy90cmVlLXZpZXctZ2l0LWJyYW5jaC9saWIvbWFpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztvQkFDb0MsTUFBTTs7dUNBRVIsK0JBQStCOzs7O0FBSGpFLFdBQVcsQ0FBQzs7QUFLWixJQUFJLFdBQVcsQ0FBQzs7QUFFVCxTQUFTLFFBQVEsR0FBRztBQUN6QixhQUFXLEdBQUcsOEJBQ1osSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsRUFDckMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxDQUFDLENBQzNFLENBQUM7QUFDRixRQUFNLEVBQUUsQ0FBQztDQUNWOztBQUVNLFNBQVMsVUFBVSxHQUFHO0FBQzNCLGFBQVcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUN0QixhQUFXLEdBQUcsSUFBSSxDQUFDO0NBQ3BCOztBQUVELElBQUksdUJBQXVCLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQzs7QUFFeEMsU0FBUyxNQUFNLEdBQUc7QUFDaEIsU0FBTyxDQUFDLE9BQU8sQ0FDYixJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsSUFDMUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQzNDLENBQUMsSUFBSSxDQUFDLFVBQUEsV0FBVyxFQUFJO0FBQ3BCLFFBQUcsQ0FBQyxXQUFXLEVBQUUsT0FBTztBQUN4QixRQUFJLFFBQVEsR0FBRyxXQUFXLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQ25ELFFBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzlDLFFBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLENBQUM7OztBQUdsRCxTQUFJLElBQUksVUFBVSxJQUFJLHVCQUF1QixDQUFDLElBQUksRUFBRSxFQUFFO0FBQ3BELFVBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxTQUFTO0FBQ25ELDZCQUF1QixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNsRCw2QkFBdUIsVUFBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQzVDOzs7QUFHRCxTQUFJLElBQUksVUFBVSxJQUFJLFlBQVksRUFBRTtBQUNsQyxVQUFHLENBQUMsVUFBVSxFQUFFLFNBQVM7QUFDekIsVUFBRyx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUU7QUFDMUMsK0JBQXVCLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO09BQ2xELE1BQU07QUFDTCxZQUFJLGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDdkUsK0JBQXVCLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSwwQ0FBc0IsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7T0FDM0Y7S0FDRjtHQUNGLENBQUMsU0FBTSxDQUFDLFVBQUEsS0FBSztXQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDO0dBQUEsQ0FBQyxDQUFDO0NBQzlEOztBQUVELFNBQVMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRTtBQUMxQyxNQUFJLEVBQUUsR0FBRyxVQUFVLENBQUMsYUFBYSxrQkFBZ0IsSUFBSSxRQUFLLENBQUM7QUFDM0QsU0FBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDO0FBQ2pFLFNBQU8sRUFBRSxDQUFDO0NBQ1giLCJmaWxlIjoiL1VzZXJzL2Vyc2thZ2dzLy5hdG9tL3BhY2thZ2VzL3RyZWUtdmlldy1naXQtYnJhbmNoL2xpYi9tYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG5pbXBvcnQgeyBDb21wb3NpdGVEaXNwb3NhYmxlIH0gZnJvbSAnYXRvbSc7XG5cbmltcG9ydCB0cmVlVmlld0dpdFJlcG9zaXRvcnkgZnJvbSAnLi90cmVlLXZpZXctZ2l0LXJlcG9zaXRvcnkuanMnO1xuXG52YXIgZGlzcG9zYWJsZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgZGlzcG9zYWJsZXMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZShcbiAgICBhdG9tLnByb2plY3Qub25EaWRDaGFuZ2VQYXRocyh1cGRhdGUpLFxuICAgIGF0b20uY29tbWFuZHMuYWRkKCdhdG9tLXdvcmtzcGFjZScsICd0cmVlLXZpZXctZ2l0LWJyYW5jaDpyZWxvYWQnLCB1cGRhdGUpLFxuICApO1xuICB1cGRhdGUoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYWN0aXZhdGUoKSB7XG4gIGRpc3Bvc2FibGVzLmRpc3Bvc2UoKTtcbiAgZGlzcG9zYWJsZXMgPSBudWxsO1xufVxuXG52YXIgdHJlZVZpZXdHaXRSZXBvc2l0b3JpZXMgPSBuZXcgTWFwKCk7XG5cbmZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgUHJvbWlzZS5yZXNvbHZlKFxuICAgIGF0b20ucGFja2FnZXMuaXNQYWNrYWdlTG9hZGVkKCd0cmVlLXZpZXcnKSAmJlxuICAgIGF0b20ucGFja2FnZXMuYWN0aXZhdGVQYWNrYWdlKCd0cmVlLXZpZXcnKVxuICApLnRoZW4odHJlZVZpZXdQa2cgPT4ge1xuICAgIGlmKCF0cmVlVmlld1BrZykgcmV0dXJuO1xuICAgIHZhciB0cmVlVmlldyA9IHRyZWVWaWV3UGtnLm1haW5Nb2R1bGUuY3JlYXRlVmlldygpO1xuICAgIHZhciB0cmVlVmlld0VsID0gYXRvbS52aWV3cy5nZXRWaWV3KHRyZWVWaWV3KTtcbiAgICB2YXIgcmVwb3NpdG9yaWVzID0gYXRvbS5wcm9qZWN0LmdldFJlcG9zaXRvcmllcygpO1xuXG4gICAgLy8gcmVtb3ZlIG9sZCByZXBvc2l0b3JpZXNcbiAgICBmb3IobGV0IHJlcG9zaXRvcnkgb2YgdHJlZVZpZXdHaXRSZXBvc2l0b3JpZXMua2V5cygpKSB7XG4gICAgICBpZihyZXBvc2l0b3JpZXMuaW5kZXhPZihyZXBvc2l0b3J5KSA+IC0xKSBjb250aW51ZTtcbiAgICAgIHRyZWVWaWV3R2l0UmVwb3NpdG9yaWVzLmdldChyZXBvc2l0b3J5KS5kZXN0cm95KCk7XG4gICAgICB0cmVlVmlld0dpdFJlcG9zaXRvcmllcy5kZWxldGUocmVwb3NpdG9yeSk7XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIGV4aXN0aW5nIHJlcG9zaXRvcmllcyBhbmQgYWRkIG5ldyBvbmVzXG4gICAgZm9yKGxldCByZXBvc2l0b3J5IG9mIHJlcG9zaXRvcmllcykge1xuICAgICAgaWYoIXJlcG9zaXRvcnkpIGNvbnRpbnVlO1xuICAgICAgaWYodHJlZVZpZXdHaXRSZXBvc2l0b3JpZXMuaGFzKHJlcG9zaXRvcnkpKSB7XG4gICAgICAgIHRyZWVWaWV3R2l0UmVwb3NpdG9yaWVzLmdldChyZXBvc2l0b3J5KS51cGRhdGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBwcm9qZWN0Um9vdEVsID0gZ2V0UHJvamVjdFJvb3RFbCh0cmVlVmlld0VsLCByZXBvc2l0b3J5LmdldFBhdGgoKSk7XG4gICAgICAgIHRyZWVWaWV3R2l0UmVwb3NpdG9yaWVzLnNldChyZXBvc2l0b3J5LCB0cmVlVmlld0dpdFJlcG9zaXRvcnkocmVwb3NpdG9yeSwgcHJvamVjdFJvb3RFbCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSkuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcihlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaykpO1xufVxuXG5mdW5jdGlvbiBnZXRQcm9qZWN0Um9vdEVsKHRyZWVWaWV3RWwsIHBhdGgpIHtcbiAgdmFyIGVsID0gdHJlZVZpZXdFbC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1wYXRoPVwiJHtwYXRofVwiXWApO1xuICB3aGlsZSghZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdwcm9qZWN0LXJvb3QnKSkgZWwgPSBlbC5wYXJlbnROb2RlO1xuICByZXR1cm4gZWw7XG59XG4iXX0=
//# sourceURL=/Users/erskaggs/.atom/packages/tree-view-git-branch/lib/main.js
